name: Go

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.17
    
    - name: Build
      run: go build -v ./...

    - name: Run docker-compose
      run: docker-compose -f docker-compose-dev.yml up -d
      
    - name: Test
      run: go test -v ./...
    - name: Run golangci-lint
      # You may pin to the exact commit or the version.
      # uses: golangci/golangci-lint-action@5c56cd6c9dc07901af25baab6f2b0d9f3b7c3018
      uses: golangci/golangci-lint-action@v2.5.2
      with:
        # version of golangci-lint to use in form of v1.2 or v1.2.3 or `latest` to use the latest version
        # version: # optional
        # golangci-lint command line arguments
        # args: # optional, default is 
        # golangci-lint working directory, default is project root
        # working-directory: # optional
        # the token is used for fetching patch of a pull request to show only new issues
        # github-token: # default is ${{ github.token }}
        # if set to true and the action runs on a pull request - the action outputs only newly found issues
        # only-new-issues: 
        # if set to true then action uses pre-installed Go
        skip-go-installation: true
        # if set to true then the action don't cache or restore ~/go/pkg.
        skip-pkg-cache: true
        # if set to true then the action don't cache or restore ~/.cache/go-build.
        # skip-build-cache: 
  deploy:
    runs-on: ubuntu-latest
    needs: build
    env:
        PRIVATE_KEY: ${{secrets.AWS_PRIVATE_KEY}}
        HOSTNAME : ${{secrets.HOSTNAME}}
        USER_NAME : ${{secrets.USER_NAME}}
        AWS_KNOWN_HOSTS: ${{secrets.AWS_KNOWN_HOSTS}}
    
    steps:
      - uses: actions/checkout@v2 

      - name: build docker image
        run: docker build -t jokes-api .

      - name: save docker image
        run: docker save jokes-api > jokes-api.tar
        
      - name: deploy to EC2
        run: |
          mkdir -p ~/.ssh/
          echo "$PRIVATE_KEY" > private_key && chmod 600 ./private_key
          echo "$AWS_KNOWN_HOSTS" > ~/.ssh/known_hosts
          sudo scp -i private_key ./jokes-api.tar ${USER_NAME}@${HOSTNAME}:/home/ubuntu/jokes-app/jokes-api.tar &&
          sudo scp -i private_key ./docker-compose-dev.yml ${USER_NAME}@${HOSTNAME}:/home/ubuntu/jokes-app/docker-compose-dev.yml &&
          sudo scp -i private_key ./docker-compose.yml ${USER_NAME}@${HOSTNAME}:/home/ubuntu/jokes-app/docker-compose.yml
          ssh -i private_key ${USER_NAME}@${HOSTNAME} '
          
            #Now we have got the access of EC2 and we will start the deploy .
            cd jokes-app &&
            sudo docker-compose down --remove-orphans &&
            sudo docker load < jokes-api.tar &&
            sudo docker-compose -f docker-compose-dev.yml up -d &&
            sudo docker-compose up -d 