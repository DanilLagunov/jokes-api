name: Go

on:
      push:
        branches: [ master ]
      pull_request:
        branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      PORT: 8000
      READ_HEADER_TIMEOUT: 30s
      READ_TIMEOUT: 60s
      WRITE_TIMEOUT: 60s
      DB_URI: "mongodb://mongo"
      DB_NAME: "jokes-api"
      JOKES_COLLECTION: "jokes"
      DEFAULT_EXPIRATION: 20s
      CLEANUP_INTERVAL: 60s

    steps:
    - uses: actions/checkout@v2

    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.17
    
    - name: Build
      run: go build -v ./...

    - name: Run docker-compose
      run: docker-compose -f docker-compose-dev.yml up -d
      
    - name: Test
      run: go test -v ./...
    - name: Run golangci-lint
      # You may pin to the exact commit or the version.
      # uses: golangci/golangci-lint-action@5c56cd6c9dc07901af25baab6f2b0d9f3b7c3018
      uses: golangci/golangci-lint-action@v2.5.2
      with:
        # version of golangci-lint to use in form of v1.2 or v1.2.3 or `latest` to use the latest version
        # version: # optional
        # golangci-lint command line arguments
        # args: # optional, default is 
        # golangci-lint working directory, default is project root
        # working-directory: # optional
        # the token is used for fetching patch of a pull request to show only new issues
        # github-token: # default is ${{ github.token }}
        # if set to true and the action runs on a pull request - the action outputs only newly found issues
        # only-new-issues: 
        # if set to true then action uses pre-installed Go
        skip-go-installation: true
        # if set to true then the action don't cache or restore ~/go/pkg.
        skip-pkg-cache: true
        # if set to true then the action don't cache or restore ~/.cache/go-build.
        # skip-build-cache: 
  deploy:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: build
    env:
      PRIVATE_KEY: ${{secrets.AWS_PRIVATE_KEY}}
      HOSTNAME :  ec2-3-144-136-100.us-east-2.compute.amazonaws.com
      USER_NAME : "ubuntu"
      ECR_REGISTRY: "058344251519.dkr.ecr.us-east-2.amazonaws.com"
      ECR_REPOSITORY: "jokes-api"
      IMAGE_TAG: "latest"
      PORT: 8000
      READ_HEADER_TIMEOUT: 30s
      READ_TIMEOUT: 60s
      WRITE_TIMEOUT: 60s
      DB_URI: "mongodb+srv://${{secrets.DB_USERNAME}}:${{secrets.DB_PASSWORD}}@sandbox.evatv.mongodb.net/myFirstDatabase?retryWrites=true&w=majority"
      DB_NAME: "jokes-api"
      JOKES_COLLECTION: "jokes"
      DEFAULT_EXPIRATION: 20s
      CLEANUP_INTERVAL: 60s
    
    steps:
    - name: Check out code
      uses: actions/checkout@v2
  
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: "us-east-2"

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      run: |
        docker build -t ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG} .
        docker push ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}
      
    - name: deploy to EC2
      shell: bash
      run: |
        mkdir -p ~/.ssh/
        echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
        sudo scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i private_key ./docker-compose.yml ${USER_NAME}@${HOSTNAME}:/home/ubuntu/jokes-app/docker-compose.yml
        sudo ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i private_key ${USER_NAME}@${HOSTNAME} '
        
          #Now we have got the access of EC2 and we will start the deploy .
          cd jokes-app &&
          sudo docker-compose down --remove-orphans &&
          sudo docker login -u AWS -p $(aws ecr get-login-password --region us-east-2) 058344251519.dkr.ecr.us-east-2.amazonaws.com &&
          sudo docker pull 058344251519.dkr.ecr.us-east-2.amazonaws.com/jokes-api:latest
          sudo docker-compose up -d 
        '